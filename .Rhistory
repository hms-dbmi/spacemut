#   Check Package:             'Ctrl + Shift + E'
library("devtools")
library(roxygen2)
document()
devtools::install()
setwd("./spacemut")
getwd()
setwd("..")
install("spacemut")
getwd()
setwd("./spacemut/")
getwd()
devtools::install()
devtools::install()
usethis::use_package("ica") # Defaults to imports
usethis::use_package("parallel") # Defaults to imports
devtools::document()
library(spacemut)
?extract.comp
document()
library(spacemut)
info <- read.table("http://pklab.med.harvard.edu/ruslan/spacemut/TOPMed.30kb.txt",header=TRUE)
dim(info)
head(info)
head(info[,1:6])
rate <- info[,-c(1:3)]
comp.info <- extract.comp(rate,13)
dim(rate)
dim(info)
info <- read.table("http://pklab.med.harvard.edu/ruslan/spacemut/TOPMed.30kb.txt",header=TRUE)
dim(info)
rate <- info[,-c(1:3)]
comp.info <- extract.comp(rate,13)
icM <- comp.info[[1]]
head(icS)
icS <- comp.info[[2]]
head(icS)
icM <- comp.info[[1]]
head(icM)
head(icS)
plot.reflection.matrix(icM)
plot.reflection.matrix(icM)
reflection.scatter(3,3,icM)
reflection.scatter(3,3,icM)
reflection.scatter(3,3,icM)
reflection.scatter(1,2,icM)
reflection.scatter(1,1,icM)
draw.signature(icM[,10])
draw.signature(icM[,3])
head(icM)
head(icM[,3])
reflection.scatter(1,2,icM)
ref.prop <- reflection.test(icM)
head(ref.prop[[1]])
head(ref.prop[[1]])
```{r,results="hide"}
head(ref.prop[[2]])
head(ref.prop[[2]])
draw.signature(icM[,3])
##' @export
draw.signature <- function(sign,n.sign=NULL){
sub.alphabet <- c("C>A","C>G","C>T","T>A","T>C","T>G")
sub.cols <- cbind(sub.alphabet,c("blue","black","red","grey60","darkgreen","pink")); colnames(sub.cols)=c("sub","col")
sign.context <- parse.context(names(sign)); sign.reverted <- revert.matrix(sign.context)
sign.r <- sign[sign.context[,3] %in% sub.alphabet]; sign.context <- sign.context[sign.context[,3] %in% sub.alphabet,]
sign.c <- sign[sign.reverted[,3] %in% sub.alphabet]; sign.reverted <- sign.reverted[sign.reverted[,3] %in% sub.alphabet,]
tbl <- rbind(sign.r[order(sign.context[,3],sign.context[,1])],sign.c[order(sign.reverted[,3],sign.reverted[,1])])
cols <- as.character(merge(sign.context,sub.cols,by = c("sub"))[,"col"])[order(sign.context[,3],sign.context[,1])]
cols1 <- rep("grey",2*length(cols))
cols1[seq(1,2*length(cols),2)] = adjustcolor(cols,0.3);cols1[seq(2,2*length(cols),2)] = adjustcolor(cols,1)
n.plots=3
nf <- layout(matrix(1:n.plots ,n.plots,1, byrow=F), heights=c(0.05,0.05,rep(1,n.plots-2)))#, respect=T)
#layout.show(nf)
par(mar=c(0,3,0,0))
image( t(rbind(1:6,1:6)),col="white",xaxt="na",yaxt="na",border=NA)
for (k in 0:5) {text(k/5,0.5,sub.alphabet[k+1],cex=2,font=2)}
par(mar=c(0,3,0,0))
#image( t(rbind(1:6,1:6)),col=sub.cols[,2],xaxt="na",yaxt="na")
image( t(rbind(1:6,7:12)),col=c(adjustcolor(sub.cols[,2],0.3),sub.cols[,2]),xaxt="na",yaxt="na")
box(lwd=0.5);abline(h=0.5,lwd=0.5)
par(mar=c(3,3,1,0),mgp=c(1.5,0.5,0),lwd=0.15)
barplot( tbl,border= TRUE,space=rep(0.0,2*ncol(tbl)),
xaxs = "i", beside=T,ylab="loading",cex.lab = 1.5,cex.axis = 1.5, legend.text=F,names.arg=sign.context[,1],cex.names = 0.6,las=2,col=cols1)
if (!is.null(n.sign)) legend("topright",paste("Signature",n.sign),cex=1,text.font=2,box.lwd=0)
}
##'
draw.signature(icM[,3])
?merge
##' @export
draw.signature <- function(sign,n.sign=NULL){
sub.alphabet <- c("C>A","C>G","C>T","T>A","T>C","T>G")
sub.cols <- cbind(sub.alphabet,c("blue","black","red","grey60","darkgreen","pink")); colnames(sub.cols)=c("sub","col")
sign.context <- parse.context(names(sign)); sign.reverted <- revert.matrix(sign.context)
sign.r <- sign[sign.context[,3] %in% sub.alphabet]; sign.context <- sign.context[sign.context[,3] %in% sub.alphabet,]
sign.c <- sign[sign.reverted[,3] %in% sub.alphabet]; sign.reverted <- sign.reverted[sign.reverted[,3] %in% sub.alphabet,]
tbl <- rbind(sign.r[order(sign.context[,3],sign.context[,1])],sign.c[order(sign.reverted[,3],sign.reverted[,1])])
cols <- as.character(base::merge(sign.context,sub.cols,by = c("sub"))[,"col"])[order(sign.context[,3],sign.context[,1])]
cols1 <- rep("grey",2*length(cols))
cols1[seq(1,2*length(cols),2)] = adjustcolor(cols,0.3);cols1[seq(2,2*length(cols),2)] = adjustcolor(cols,1)
n.plots=3
nf <- layout(matrix(1:n.plots ,n.plots,1, byrow=F), heights=c(0.05,0.05,rep(1,n.plots-2)))#, respect=T)
#layout.show(nf)
par(mar=c(0,3,0,0))
image( t(rbind(1:6,1:6)),col="white",xaxt="na",yaxt="na",border=NA)
for (k in 0:5) {text(k/5,0.5,sub.alphabet[k+1],cex=2,font=2)}
par(mar=c(0,3,0,0))
#image( t(rbind(1:6,1:6)),col=sub.cols[,2],xaxt="na",yaxt="na")
image( t(rbind(1:6,7:12)),col=c(adjustcolor(sub.cols[,2],0.3),sub.cols[,2]),xaxt="na",yaxt="na")
box(lwd=0.5);abline(h=0.5,lwd=0.5)
par(mar=c(3,3,1,0),mgp=c(1.5,0.5,0),lwd=0.15)
barplot( tbl,border= TRUE,space=rep(0.0,2*ncol(tbl)),
xaxs = "i", beside=T,ylab="loading",cex.lab = 1.5,cex.axis = 1.5, legend.text=F,names.arg=sign.context[,1],cex.names = 0.6,las=2,col=cols1)
if (!is.null(n.sign)) legend("topright",paste("Signature",n.sign),cex=1,text.font=2,box.lwd=0)
}
##'
draw.signature(icM[,3])
##' @param n.sign name of component to show in legend
##' @export
draw.signature <- function(sign,n.sign=NULL){
sub.alphabet <- c("C>A","C>G","C>T","T>A","T>C","T>G")
sub.cols <- cbind(sub.alphabet,c("blue","black","red","grey60","darkgreen","pink")); colnames(sub.cols)=c("sub","col")
sign.context <- parse.context(names(sign)); sign.reverted <- revert.matrix(sign.context)
sign.r <- sign[sign.context[,3] %in% sub.alphabet]; sign.context <- sign.context[sign.context[,3] %in% sub.alphabet,]
sign.c <- sign[sign.reverted[,3] %in% sub.alphabet]; sign.reverted <- sign.reverted[sign.reverted[,3] %in% sub.alphabet,]
tbl <- rbind(sign.r[order(sign.context[,3],sign.context[,1])],sign.c[order(sign.reverted[,3],sign.reverted[,1])])
cols <- as.character(base::merge(sign.context,sub.cols,by = c("sub"))[,"col"])[order(sign.context[,3],sign.context[,1])]
cols1 <- rep("grey",2*length(cols))
cols1[seq(1,2*length(cols),2)] = adjustcolor(cols,0.3);cols1[seq(2,2*length(cols),2)] = adjustcolor(cols,1)
n.plots=3
nf <- layout(matrix(1:n.plots ,n.plots,1, byrow=F), heights=c(0.05,0.05,rep(1,n.plots-2)))#, respect=T)
#layout.show(nf)
par(mar=c(0,3,0,0))
image( t(rbind(1:6,1:6)),col="white",xaxt="na",yaxt="na",border=NA)
for (k in 0:5) {text(k/5,0.5,sub.alphabet[k+1],cex=2,font=2)}
par(mar=c(0,3,0,0))
#image( t(rbind(1:6,1:6)),col=sub.cols[,2],xaxt="na",yaxt="na")
image( t(rbind(1:6,7:12)),col=c(adjustcolor(sub.cols[,2],0.3),sub.cols[,2]),xaxt="na",yaxt="na")
box(lwd=0.5);abline(h=0.5,lwd=0.5)
par(mar=c(3,3,1,0),mgp=c(1.5,0.5,0),lwd=0.15)
barplot( tbl,border= TRUE,space=rep(0.0,2*ncol(tbl)),
xaxs = "i", beside=T,ylab="loading",cex.lab = 1.5,cex.axis = 1.5, legend.text=F,names.arg=sign.context[,1],cex.names = 0.6,las=2,col=cols1)
if (!is.null(n.sign)) legend("topright",paste("Signature",n.sign),cex=1,text.font=2,box.lwd=0)
}
draw.signature(icM[,3])
sign <- icM[,3]
sign
n.sign=NULL
sub.alphabet <- c("C>A","C>G","C>T","T>A","T>C","T>G")
sub.cols <- cbind(sub.alphabet,c("blue","black","red","grey60","darkgreen","pink")); colnames(sub.cols)=c("sub","col")
sign.context <- parse.context(names(sign)); sign.reverted <- revert.matrix(sign.context)
sign.r <- sign[sign.context[,3] %in% sub.alphabet]; sign.context <- sign.context[sign.context[,3] %in% sub.alphabet,]
sign.c <- sign[sign.reverted[,3] %in% sub.alphabet]; sign.reverted <- sign.reverted[sign.reverted[,3] %in% sub.alphabet,]
tbl <- rbind(sign.r[order(sign.context[,3],sign.context[,1])],sign.c[order(sign.reverted[,3],sign.reverted[,1])])
cols <- as.character(base::merge(sign.context,sub.cols,by = c("sub"))[,"col"])[order(sign.context[,3],sign.context[,1])]
sign.context
sub.cols
merge(sign.context,sub.cols,by = c("sub"))
(base::merge(sign.context,sub.cols,by = c("sub")))
?merge
(merge(sign.context,sub.cols,by = c("sub")))
( (base::merge)(sign.context,sub.cols,by = c("sub")))
( (base::merge)(sign.context,sub.cols,by = c("sub")))
warnings()
cols <- as.character( (base::merge)(sign.context,sub.cols,by = c("sub"))[,"col"])[order(sign.context[,3],sign.context[,1])]
sign.context
head(  merge(sign.context,sub.cols,by = c("sub"))  )
head(  merge(sign.context,sign.context,by = c("sub"))  )
?merge
?base::merge
?(base::merge)
?(base:::merge)
cols <- as.character( (base:::merge)(sign.context,sub.cols,by = c("sub"))[,"col"])[order(sign.context[,3],sign.context[,1])]
head(sign.context)
head(ssub.cols)
head(sub.cols)
sub.cols[match(sign.context[,"sub"],sub.cols[,"sub"]),"col"]
sub.cols[match(sub.cols[,"sub"],sign.context[,"sub"]),"col"]
cols <- as.character(sub.cols[match(sign.context[,"sub"],sub.cols[,"sub"]),"col"])[order(sign.context[,3],sign.context[,1])]
cols1 <- rep("grey",2*length(cols))
cols1[seq(1,2*length(cols),2)] = adjustcolor(cols,0.3);cols1[seq(2,2*length(cols),2)] = adjustcolor(cols,1)
n.plots=3
nf <- layout(matrix(1:n.plots ,n.plots,1, byrow=F), heights=c(0.05,0.05,rep(1,n.plots-2)))#, respect=T)
#layout.show(nf)
par(mar=c(0,3,0,0))
image( t(rbind(1:6,1:6)),col="white",xaxt="na",yaxt="na",border=NA)
for (k in 0:5) {text(k/5,0.5,sub.alphabet[k+1],cex=2,font=2)}
par(mar=c(0,3,0,0))
#image( t(rbind(1:6,1:6)),col=sub.cols[,2],xaxt="na",yaxt="na")
image( t(rbind(1:6,7:12)),col=c(adjustcolor(sub.cols[,2],0.3),sub.cols[,2]),xaxt="na",yaxt="na")
box(lwd=0.5);abline(h=0.5,lwd=0.5)
par(mar=c(3,3,1,0),mgp=c(1.5,0.5,0),lwd=0.15)
barplot( tbl,border= TRUE,space=rep(0.0,2*ncol(tbl)),
xaxs = "i", beside=T,ylab="loading",cex.lab = 1.5,cex.axis = 1.5, legend.text=F,names.arg=sign.context[,1],cex.names = 0.6,las=2,col=cols1)
##' @param n.sign name of component to show in legend
##' @export
draw.signature <- function(sign,n.sign=NULL){
sub.alphabet <- c("C>A","C>G","C>T","T>A","T>C","T>G")
sub.cols <- cbind(sub.alphabet,c("blue","black","red","grey60","darkgreen","pink")); colnames(sub.cols)=c("sub","col")
sign.context <- parse.context(names(sign)); sign.reverted <- revert.matrix(sign.context)
sign.r <- sign[sign.context[,3] %in% sub.alphabet]; sign.context <- sign.context[sign.context[,3] %in% sub.alphabet,]
sign.c <- sign[sign.reverted[,3] %in% sub.alphabet]; sign.reverted <- sign.reverted[sign.reverted[,3] %in% sub.alphabet,]
tbl <- rbind(sign.r[order(sign.context[,3],sign.context[,1])],sign.c[order(sign.reverted[,3],sign.reverted[,1])])
#cols <- as.character( (base:::merge)(sign.context,sub.cols,by = c("sub"))[,"col"])[order(sign.context[,3],sign.context[,1])]
cols <- as.character(sub.cols[match(sign.context[,"sub"],sub.cols[,"sub"]),"col"])[order(sign.context[,3],sign.context[,1])]
cols1 <- rep("grey",2*length(cols))
cols1[seq(1,2*length(cols),2)] = adjustcolor(cols,0.3);cols1[seq(2,2*length(cols),2)] = adjustcolor(cols,1)
n.plots=3
nf <- layout(matrix(1:n.plots ,n.plots,1, byrow=F), heights=c(0.05,0.05,rep(1,n.plots-2)))#, respect=T)
#layout.show(nf)
par(mar=c(0,3,0,0))
image( t(rbind(1:6,1:6)),col="white",xaxt="na",yaxt="na",border=NA)
for (k in 0:5) {text(k/5,0.5,sub.alphabet[k+1],cex=2,font=2)}
par(mar=c(0,3,0,0))
#image( t(rbind(1:6,1:6)),col=sub.cols[,2],xaxt="na",yaxt="na")
image( t(rbind(1:6,7:12)),col=c(adjustcolor(sub.cols[,2],0.3),sub.cols[,2]),xaxt="na",yaxt="na")
box(lwd=0.5);abline(h=0.5,lwd=0.5)
par(mar=c(3,3,1,0),mgp=c(1.5,0.5,0),lwd=0.15)
barplot( tbl,border= TRUE,space=rep(0.0,2*ncol(tbl)),
xaxs = "i", beside=T,ylab="loading",cex.lab = 1.5,cex.axis = 1.5, legend.text=F,names.arg=sign.context[,1],cex.names = 0.6,las=2,col=cols1)
if (!is.null(n.sign)) legend("topright",paste("Signature",n.sign),cex=1,text.font=2,box.lwd=0)
}
draw.signature(icM[,3])
draw.signature(icM[,3])
draw.signature(icM[,3])
plot.intensities(icS[,1], info, chr=16, start=1e+6,end=1e+7,  span.wind=30)
plot.intensities(icS[,4], info, chr=16, start=1e+6,end=1e+7,  span.wind=30)
plot.intensities(icS[,4], info, chr=16, start=1e+6,end=2e+7,  span.wind=30)
plot.intensities(icS[,4], info, chr=8, start=1e+6,end=2e+7,  span.wind=30)
plot.intensities(icS[,5], info, chr=8, start=1e+6,end=2e+7,  span.wind=30)
plot.intensities(icS[,6], info, chr=8, start=1e+6,end=2e+7,  span.wind=30)
plot.intensities(icS[,7], info, chr=8, start=1e+6,end=2e+7,  span.wind=30)
plot.intensities(icS[,8], info, chr=8, start=1e+6,end=2e+7,  span.wind=30)
plot.intensities(icS[,1], info, chr=8, start=1e+6,end=2e+7,  span.wind=30)
plot.intensities(icS[,2], info, chr=8, start=1e+6,end=2e+7,  span.wind=30)
plot.intensities(icS[,4], info, chr=8, start=1e+6,end=2e+7,  span.wind=30)
plot.intensities(icS[,4]+icS[,5], info, chr=8, start=1e+6,end=2e+7,  span.wind=30)
plot.intensities(icS[,5], info, chr=8, start=1e+6,end=2e+7,  span.wind=30)
plot.intensities(icS[,4]+icS[,5], info, chr=8, start=1e+6,end=2e+7,  span.wind=30)
plot.intensities(icS[,4]+icS[,5], info, chr=8, start=0,end=2e+7,  span.wind=30)
plot.intensities(icS[,5], info, chr=8, start=0,end=2e+7,  span.wind=30)
plot.intensities(icS[,4]+icS[,5], info, chr=8, start=0,end=2e+7,  span.wind=30)
plot.intensities(icS[,5], info, chr=8, start=0,end=2e+7,  span.wind=30)
plot.intensities(icS[,5], info, chr=8, start=0,end=10e+7,  span.wind=30)
plot.intensities(icS[,5], info, chr=8, start=0,end=4e+7,  span.wind=30)
plot.intensities(icS[,4]+icS[,5], info, chr=8, start=0,end=4e+7,  span.wind=30)
##' @export
plot.intensities <- function(track, info, chr=1,span.wind=20, start=NULL, end=NULL){
start.chr <- min(info$start[info$chr==chr]); end.chr <- max(info$end[info$chr==chr])
if (!is.null(start)){ start.chr <- max(start,start.chr) }
if (!is.null(end)){ end.chr <- min(end,end.chr) }
ind <- info$chr == chr & info$start >= start.chr & info$end <= end.chr
ft <- loess(track[ind] ~ info$start[ind],span=span.wind/sum(ind))
par(mfrow=c(1,1),mar=c(4,4,1,1),mgp=c(2,0.5,0))
plot(info$start[ind],track[ind],pch=19,cex=0.3,col="grey50",
ylab="intensity",xlab="position",cex.lab=2)
lines(info$start[ind],ft$fitted,col="blue",lwd=1,lty=1)
abline(h=0,lty=2,col="black")
}
plot.intensities(icS[,4]+icS[,5], info, chr=8, start=0,end=4e+7,  span.wind=30)
boot <- spectra.bootstrap(icM,rate,n.boot=50,n.cores=20)
##' @export
spectra.bootstrap <- function(icM,rate,n.comp=ncol(icM),n.boot=100,n.cores=1){
boot.stat <- do.call(rbind,parallel::mclapply(1:n.boot,function(k){
rgns <- sample(1:nrow(rate),replace = TRUE)
comp.info.boot <- extract.comp(rate[rgns,],n.comp)
icM.boot <- comp.info.boot[[1]]
icS.boot <- comp.info.boot[[2]]
mat = (cor(icM[,],icM.boot[,],method="spearman")); #mat[mat < 0] = 0
apply(mat,1,function(x) max(abs(x)) )
},mc.cores = n.cores))
rownames(boot.stat) <- paste("run_",1:n.boot,sep="")
return(boot.stat)
}
boot <- spectra.bootstrap(icM,rate,n.boot=50,n.cores=20)
visualize.bootstrap(boot,icM=icM)
visualize.bootstrap(boot,icM=icM)
visualize.bootstrap(boot,icM=icM)
stat.extract <- select.ncomponents(rate,n.min=2,n.max=5,cutoff=0.8,n.cores=20)
head(stat.extract)
head(stat.extract)
show.optimal.comp(stat.extract)
devtools::document()
devtools::install()
head(info[,1:6])
head(info[,1:6])
head(info[,1:6])
str(info[,1:6])
devtools::document()
devtools::install()
devtools::document()
devtools::install()
show.optimal.comp(stat.extract)
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
knitr::knit(input='/d0/home/solrust/mutations/spacemut/vignettes/inference_processes.Rmd',
output='/d0/home/solrust/mutations/spacemut/vignettes/inference_processes.md')
q()
load("/d0/home/solrust/mutations/topmed_final_FigS1.RData")
qplot(moms[3,],moms[4,])+geom_hline(yintercept=3,colour="red") #,xlim=c(-1,1),ylim=c(0,2))
library(vars)
library(parallel)
library(ggplot2)
library(gplots)
library(ica)
mat = (cor(icM,icM[xcompl,],method="spearman")); #mat[mat < 0] = 0
heatmap.2( mat^3,key=TRUE,Rowv=NA,Colv=NA,trace="none",col = colorRampPalette(c("blue","grey80",'red'))(10),main="ICA-spectra" )
cutoff <- 0.8
reflection.stat <- do.call(rbind,mclapply( 2:35,function(i){
#i <- 13
comp.temp <- extract.comp(rate.new,i)
icM.temp <- comp.temp[[1]]
mat.temp = (cor(icM.temp,icM.temp[xcompl,],method="spearman"));
#heatmap.2( mat.temp^3,key=TRUE,Rowv=NA,Colv=NA,trace="none",col = colorRampPalette(c("blue","grey80",'red'))(10),main="ICA-spectra" )
c(i,sum(diag(mat.temp) > cutoff),sum(diag(mat.temp) < -cutoff), sum(abs(mat.temp) > cutoff)-sum(abs(diag(mat.temp)) > cutoff))
},mc.cores = 10))
colnames(reflection.stat) <- c("n","sym","asym","paired")
reflection.stat <- as.data.frame(reflection.stat)
# estimate cumulative explained variacne
t <- apply(rate.new,2,function(x) (x-mean(x))/sd(x) )
wh <- svd(t)
cum.var <- unlist(lapply(1:192,function(i) sum(wh$d[1:i]^2)/sum(wh$d[]^2) ))
par(mar=c(7,8,2,2),mgp=c(4.5,1,0))
image( mat^1,axes=FALSE,names=TRUE,col=adjustcolor( colorRampPalette(c("grey95","grey80","darkred"))(n = 60) ,1),
xlab="spectrum",ylab="reverse compementary\nspectrum",cex.lab=2,main="Reflection matrix",font.main=1,cex.main=2)
box(lwd=2)
axis( 1,outer=FALSE, at= seq(0,1,length.out = nrow(mat)),labels = rownames(mat),las=2,
col.axis="black",cex.axis=1)
axis( 2,outer=FALSE, at= seq(0,1,length.out = nrow(mat)),labels = rownames(mat),las=1,
col.axis="black",cex.axis=1)
ind <- reflection.stat$n < 35
par(mar=c(7,8,2,2),mgp=c(4.5,1,0))
plot(reflection.stat$n[ind], (reflection.stat$sym[ind]+reflection.stat$asym[ind]+reflection.stat$paired[ind]),ylim=c(0,15),
type=c("l"),col="green",lwd=3,
xlab="number of\nextracted components",ylab="number of components\npassed reflection test",cex.lab=2,cex.axis=2)
points(reflection.stat$n[ind], (reflection.stat$sym[ind]+reflection.stat$asym[ind]+reflection.stat$paired[ind]),
col="green",cex=0.75,lwd=3,pch=19)
lines(reflection.stat$n[ind], (reflection.stat$sym[ind]+reflection.stat$asym[ind]+reflection.stat$paired[ind]/2),
type=c("l"),col="red",lwd=3)
points(reflection.stat$n[ind], (reflection.stat$sym[ind]+reflection.stat$asym[ind]+reflection.stat$paired[ind]/2),
col="red",cex=0.75,lwd=3,pch=19)
abline(v=13,lwd=2,lty=2)
legend("bottomright",c("components","processes"),fill=NA,border=NA,bty="n",col=c("green","red"),pch=19,cex=1.5)
dim(rate.new)
stat.extract <- select.ncomponents(rate.new,n.min=2,n.max=35,cutoff=0.8,n.cores=30)
library(spacemut)
library(spacemut)
stat.extract <- select.ncomponents(rate.new,n.min=2,n.max=35,cutoff=0.8,n.cores=30)
head(stat.extract)
show.optimal.comp(stat.extract)
reflection.stat <- do.call(rbind,mclapply( 2:35,function(i){
#i <- 13
comp.temp <- spacemut::extract.comp(rate.new,i)
icM.temp <- comp.temp[[1]]
mat.temp = (cor(icM.temp,icM.temp[xcompl,],method="spearman"));
#heatmap.2( mat.temp^3,key=TRUE,Rowv=NA,Colv=NA,trace="none",col = colorRampPalette(c("blue","grey80",'red'))(10),main="ICA-spectra" )
c(i,sum(diag(mat.temp) > cutoff),sum(diag(mat.temp) < -cutoff), sum(abs(mat.temp) > cutoff)-sum(abs(diag(mat.temp)) > cutoff))
},mc.cores = 10))
colnames(reflection.stat) <- c("n","sym","asym","paired")
reflection.stat <- as.data.frame(reflection.stat)
ind <- reflection.stat$n < 35
par(mar=c(7,8,2,2),mgp=c(4.5,1,0))
plot(reflection.stat$n[ind], (reflection.stat$sym[ind]+reflection.stat$asym[ind]+reflection.stat$paired[ind]),ylim=c(0,15),
type=c("l"),col="green",lwd=3,
xlab="number of\nextracted components",ylab="number of components\npassed reflection test",cex.lab=2,cex.axis=2)
points(reflection.stat$n[ind], (reflection.stat$sym[ind]+reflection.stat$asym[ind]+reflection.stat$paired[ind]),
col="green",cex=0.75,lwd=3,pch=19)
lines(reflection.stat$n[ind], (reflection.stat$sym[ind]+reflection.stat$asym[ind]+reflection.stat$paired[ind]/2),
type=c("l"),col="red",lwd=3)
points(reflection.stat$n[ind], (reflection.stat$sym[ind]+reflection.stat$asym[ind]+reflection.stat$paired[ind]/2),
col="red",cex=0.75,lwd=3,pch=19)
abline(v=13,lwd=2,lty=2)
legend("bottomright",c("components","processes"),fill=NA,border=NA,bty="n",col=c("green","red"),pch=19,cex=1.5)
extract.comp
i <- 17
comp1 <- extract.comp(rate.new,i)
comp2 <- spacemut::extract.comp(rate.new,i)
icM1 <- comp1[[1]]
icM2 <- comp1[[2]]
cor(icM1,icM2)
icM1 <- comp1[[1]]
icM2 <- comp1[[1]]
cor(icM1,icM2)
diag( cor(icM1,icM2) )
library(spacemut)
spacemut::extract.comp
extract.comp
plot.reflection.matrix(icM1)
plot.reflection.matrix(icM2)
str(icM1)
str(icM1)
str(icM2)
icM1 <- comp1[[1]]
icM2 <- comp2[[1]]
cor(icM1,icM2)
extract.comp
extract.comp1 <- function(rate,n.comp){
t <- apply(rate,2,function(x) (x-mean(x))/sd(x) )
wh <- svd(t)
ic <- ica::icafast( (wh$v)[,1:n.comp],nc=n.comp,fun="kur")
icM <- ic$S; rownames(icM) <- colnames(t)
icS <- ( wh$u[,1:n.comp] %*% diag(wh$d)[1:n.comp,1:n.comp] %*% ic$M  )
# reverse spectra and intensities to make overall positive third moment
moms.M <- apply(icM,2,function(x){mean((x-mean(x))^3)/sd(x)^3})
moms.S <- apply(icS,2,function(x){mean((x-mean(x))^3)/sd(x)^3})
moms <- moms.M + moms.S
icM <- t(t(icM)*sign(moms))
icS <- t(t(icS)*sign(moms))
colnames(icS) <- paste("comp.",1:ncol(icS),sep="")
colnames(icM) <-  paste("comp.",1:ncol(icM),sep="")
return(list(icM,icS))
}
comp2 <- extract.comp1(rate.new,i)
icM2 <- comp2[[1]]
cor(icM1,icM2)
select.ncomponents <- function(rate,n.min=2,n.max=30,cutoff=0.8,n.cores=1){
xx <- do.call(rbind,parallel::mclapply(n.min:n.max,function(n){
comp.info <- extract.comp1(rate,n)
icM <- comp.info[[1]]
plot.reflection.matrix(icM)
ref.prop <- reflection.test(icM,cutoff)
c( n,sum(!is.na(ref.prop[[1]]$ref.comp)),nrow(ref.prop[[2]]) )
}))
colnames(xx) <- c("n","comp","proc")
cat('optimal parameters:');cat('\n')
print(xx[which.max(xx[,2]),]);cat('\n')
return(as.data.frame(xx))
}
stat.extract <- select.ncomponents(rate.new,n.min=2,n.max=35,cutoff=0.8,n.cores=30)
head(stat.extract)
show.optimal.comp(stat.extract)
q()
